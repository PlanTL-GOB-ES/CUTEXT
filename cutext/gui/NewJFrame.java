/*********************************************************************************************
This resource was developed by the Centro Nacional de Investigaciones Oncológicas (CNIO) 
in the framework of the "Plan de Impulso de las Tecnologías del Lenguaje” driven by the 
Secretaría de Estado para la Sociedad de la Información y Agenda Digital.

Copyright (C) 2017 Secretaría de Estado para la Sociedad de la Información y la Agenda Digital (SESIAD)
 
This program is free software; you can redistribute it and/or
modify it under the terms of the MIT License see LICENSE.txt file.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*********************************************************************************************/


/**
 *
 * @author Jesús Santamaría
 */
 


/****************************************************************************
 Interfaz de Usuario (GUI)
****************************************************************************/






package cutext.gui;




import java.awt.*;
import java.awt.event.*;
import java.io.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.tree.*;
import java.util.*;
import javax.swing.border.*;



import cutext.prepro.*;
import cutext.main.*;
import cutext.util.*;


/**
 *
 * @author Jesus
 */
public class NewJFrame extends javax.swing.JFrame {



	private static final long serialVersionUID = -7149755349268484907L;


    /**
     * Creates new form NewJFrame
     */
    public NewJFrame(DatosEntrada datos)
	{
		this.datos = datos;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
	{
		try
		{
			//usar el aspecto y el comportamiento del sistema operativo actual
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
			SwingUtilities.updateComponentTreeUI(NewJFrame.this);
		}
		catch(Exception e)
		{
			System.err.println("Error al usar el comportamiento del sistema operativo actual.\n" + e);
			//e.printStackTrace();
		}



		this.frases = new javax.swing.JTextArea();
		this.campoTextoDirectorioEntrada = new javax.swing.JTextField();
		this.seleccionLista = null;

		grupoBotones = new javax.swing.ButtonGroup();

			buttonOk = new javax.swing.JButton();
			buttonCancel = new javax.swing.JButton();
			jLabel1 = new javax.swing.JLabel();
			panelInput = new javax.swing.JPanel();
			labelLanguage = new javax.swing.JLabel();
			comboLanguage = new javax.swing.JComboBox<>();
			labelTagger = new javax.swing.JLabel();
			comboTagger = new javax.swing.JComboBox<>();
			labelFrec = new javax.swing.JLabel();
			comboFrec = new javax.swing.JComboBox<>();
			labelCvalue = new javax.swing.JLabel();
			comboCvalue = new javax.swing.JComboBox<>();
			panelDocuments = new javax.swing.JPanel();
			radioFile = new javax.swing.JRadioButton();
			radioText = new javax.swing.JRadioButton();
			panelOutput = new javax.swing.JPanel();
			botonSelect = new javax.swing.JButton();
			textFieldSelect = new javax.swing.JTextField();

			setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
			setTitle("CUTEXT");

			buttonOk.setText("OK");

			buttonCancel.setText("Cancel");

			jLabel1.setFont(new java.awt.Font("Arial", 2, 18)); // NOI18N
			jLabel1.setText("CUTEXT - Cvalue Used To EXtract Terms -");

			panelInput.setBorder(javax.swing.BorderFactory.createTitledBorder("Input"));

			labelLanguage.setText("Language");

			//comboLanguage.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
		
		String idiomas[] = this.datos.getIdiomas();
		for(int i = 0; i < idiomas.length; i++)
			comboLanguage.addItem((String)idiomas[i]);
		comboLanguage.setSelectedItem(this.datos.getIdioma());


			labelTagger.setText("POS Tagger");

			comboTagger.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TreeTagger", "GeniaTagger" }));

			labelFrec.setText("Frecuency Thresold");

			//comboFrec.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
		comboFrec.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", 											"12", "13", "14", "15"}));
			comboFrec.setToolTipText("frequency threshold");

			labelCvalue.setText("CValue Thresold");

			//comboCvalue.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
		comboCvalue.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"0.0", "1.0", "2.0", "3.0", "4.0", "5.0", "6.0", "7.0", 								"8.0", "9.0", "10.0", "11.0", "12.0", "13.0", "14.0", "15.0"}));
			comboCvalue.setToolTipText("C-Value Threshold");

			panelDocuments.setBorder(javax.swing.BorderFactory.createTitledBorder("Documents"));


		grupoBotones.add(radioFile);
			radioFile.setText("File/s");

		grupoBotones.add(radioText);
			radioText.setSelected(true);
			radioText.setText("Text");
		radioText.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					botonRadioTextoActionPerformed(evt);
				}
			});

			javax.swing.GroupLayout panelDocumentsLayout = new javax.swing.GroupLayout(panelDocuments);
			panelDocuments.setLayout(panelDocumentsLayout);
			panelDocumentsLayout.setHorizontalGroup(
				panelDocumentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(panelDocumentsLayout.createSequentialGroup()
					.addGap(25, 25, 25)
					.addGroup(panelDocumentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addComponent(radioText)
						.addComponent(radioFile))
					.addContainerGap(58, Short.MAX_VALUE))
			);
			panelDocumentsLayout.setVerticalGroup(
				panelDocumentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDocumentsLayout.createSequentialGroup()
					.addContainerGap(29, Short.MAX_VALUE)
					.addComponent(radioText)
					.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
					.addComponent(radioFile)
					.addGap(34, 34, 34))
			);

			javax.swing.GroupLayout panelInputLayout = new javax.swing.GroupLayout(panelInput);
			panelInput.setLayout(panelInputLayout);
			panelInputLayout.setHorizontalGroup(
				panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(panelInputLayout.createSequentialGroup()
					.addGap(32, 32, 32)
					.addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addComponent(panelDocuments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGroup(panelInputLayout.createSequentialGroup()
							.addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(labelTagger)
								.addComponent(labelLanguage))
							.addGap(18, 18, 18)
							.addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(comboTagger, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(comboLanguage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
							.addGap(118, 118, 118)
							.addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(labelFrec)
								.addComponent(labelCvalue))
							.addGap(18, 18, 18)
							.addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(comboCvalue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(comboFrec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
					.addContainerGap(69, Short.MAX_VALUE))
			);
			panelInputLayout.setVerticalGroup(
				panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(panelInputLayout.createSequentialGroup()
					.addGap(20, 20, 20)
					.addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
						.addComponent(labelLanguage)
						.addComponent(comboLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(labelFrec)
						.addComponent(comboFrec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
					.addGap(24, 24, 24)
					.addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
						.addComponent(labelTagger)
						.addComponent(comboTagger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(labelCvalue)
						.addComponent(comboCvalue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
					.addGap(34, 34, 34)
					.addComponent(panelDocuments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
					.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
			);

			panelOutput.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));

			botonSelect.setText("Select");

			textFieldSelect.setText(this.datos.getDirectorioInformacionSalida());

			javax.swing.GroupLayout panelOutputLayout = new javax.swing.GroupLayout(panelOutput);
			panelOutput.setLayout(panelOutputLayout);
			panelOutputLayout.setHorizontalGroup(
				panelOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(panelOutputLayout.createSequentialGroup()
					.addContainerGap()
					.addComponent(botonSelect)
					.addGap(18, 18, 18)
					.addComponent(textFieldSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
					.addContainerGap(26, Short.MAX_VALUE))
			);
			panelOutputLayout.setVerticalGroup(
				panelOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(panelOutputLayout.createSequentialGroup()
					.addGap(102, 102, 102)
					.addGroup(panelOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
						.addComponent(botonSelect)
						.addComponent(textFieldSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
					.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
			);

			javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
			getContentPane().setLayout(layout);
			layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addGap(257, 257, 257)
					.addComponent(buttonOk)
					.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
					.addComponent(buttonCancel)
					.addGap(169, 169, 169))
				.addGroup(layout.createSequentialGroup()
					.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
							.addGap(32, 32, 32)
							.addComponent(panelInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
							.addGap(36, 36, 36)
							.addComponent(panelOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGroup(layout.createSequentialGroup()
							.addGap(225, 225, 225)
							.addComponent(jLabel1)))
					.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
			);

			layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {buttonCancel, buttonOk});

			layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addGap(22, 22, 22)
					.addComponent(jLabel1)
					.addGap(34, 34, 34)
					.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
						.addComponent(panelOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(panelInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
					.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
					.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
						.addComponent(buttonOk)
						.addComponent(buttonCancel))
					.addGap(50, 50, 50))
			);

			pack();








		//Registrar Oyentes

		buttonOk.addActionListener(aLbotonAceptar);
		buttonCancel.addActionListener(aLbotonCancelar);
		botonSelect.addActionListener(aLbotonExaminar);




		this.setIconImage(
			crearImageIcon(".." + 
							Estaticos.FILE_SEP + 
							"gui" + 
							Estaticos.FILE_SEP + 
							"logo" + 
							Estaticos.FILE_SEP + 
							"logo.jpg", 
							"logotipo de CUTEXT").getImage());



		// refrescar el conjunto de componentes
		SwingUtilities.updateComponentTreeUI(botonSelect);
		SwingUtilities.updateComponentTreeUI(buttonCancel);
		SwingUtilities.updateComponentTreeUI(buttonOk);
		SwingUtilities.updateComponentTreeUI(comboCvalue);
		SwingUtilities.updateComponentTreeUI(comboFrec);
		SwingUtilities.updateComponentTreeUI(comboLanguage);
		SwingUtilities.updateComponentTreeUI(comboTagger);
		SwingUtilities.updateComponentTreeUI(jLabel1);
		SwingUtilities.updateComponentTreeUI(labelCvalue);
		SwingUtilities.updateComponentTreeUI(labelFrec);
		SwingUtilities.updateComponentTreeUI(labelLanguage);
		SwingUtilities.updateComponentTreeUI(labelTagger);
		SwingUtilities.updateComponentTreeUI(panelDocuments);
		SwingUtilities.updateComponentTreeUI(panelInput);
		SwingUtilities.updateComponentTreeUI(panelOutput);
		SwingUtilities.updateComponentTreeUI(radioFile);
		SwingUtilities.updateComponentTreeUI(radioText);
		SwingUtilities.updateComponentTreeUI(textFieldSelect);









    }// </editor-fold>//GEN-END:initComponents




	//Método para maximizar una ventana
	public void maximizar(JFrame ventana) 
	{
		int state = ventana.getExtendedState();
		//Fijar los bits al valor maximizado
		state |= Frame.MAXIMIZED_BOTH;
		//Maximizar la ventana
		ventana.setExtendedState(state);
	}



	//Devuelve un ImageIcon, o null si el path es inválido
	protected ImageIcon crearImageIcon(String path, String descripcion)
	{
		java.net.URL imgURL = getClass().getResource(path);
		if (imgURL != null)
			return new ImageIcon(imgURL, descripcion);
		else
		{
			System.err.println("File does not exist: " + path);
			//return null;
			return new ImageIcon();
		}
	}







	ActionListener aLbotonAceptar = new ActionListener()
	{
		public void actionPerformed(ActionEvent e)
		{
			//load parameters from cutext.properties
			cutext.util.Estaticos.loadCutextProperties(NewJFrame.this.datos, NewJFrame.this.datos.getRouteProperties(), false);
			
			//delete files from previous execution: routes are at cutext.properties
			deleteFiles();
			StaticHashTerms.initializeHashTerms();
			
			//load parameters specifically selected by user
			NewJFrame.this.datos.setPosTagger(comboTagger.getSelectedItem().toString());
			NewJFrame.this.datos.setIdioma(comboLanguage.getSelectedItem().toString()); //fijar internamente, en DatosEntrada, todo lo referente al idioma


			NewJFrame.this.datos.setUmbralFrecuencia(Integer.parseInt(comboFrec.getSelectedItem().toString()));
			NewJFrame.this.datos.setUmbralCvalue(Double.parseDouble(comboCvalue.getSelectedItem().toString()));

			NewJFrame.this.datos.setDirectorioInformacionSalida(textFieldSelect.getText());


			//save directorioEntrada
			String tempDirEntrada = NewJFrame.this.datos.getDirectorioEntrada();

			if(isSelected(radioText)) //entrada de texto
			{
				NewJDialog area = new NewJDialog(NewJFrame.this, true, frases);
				area.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
				area.setVisible(true);

				//borrar ficheros de la entrada
				borrar();
				//crear un fichero con la información de entrada
				crear();
			}
			else //if(isSelected(botonRadioDirectorio)) //entrada por directorio
			{
				seleccionLista = new ArrayList();
				new ArbolDirectorios(seleccionLista, campoTextoDirectorioEntrada, NewJFrame.this);
				NewJFrame.this.datos.setListaFicheros(seleccionLista);
				NewJFrame.this.datos.setDirectorioEntrada(campoTextoDirectorioEntrada.getText());
			}
			preprocesar(tempDirEntrada);
		}
	};

	ActionListener aLbotonCancelar = new ActionListener()
	{
		public void actionPerformed(ActionEvent e)
		{
			System.exit(0);
		}
	};

	ActionListener aLbotonExaminar = new ActionListener()
	{
		public void actionPerformed(ActionEvent e)
		{
			new ArbolDirectorios(null, textFieldSelect, NewJFrame.this);
		}
	};


	
	//delete files
	public void deleteFiles()
	{
		Properties p = new Properties();
		try
		{
			p.load(new FileReader(NewJFrame.this.datos.getRouteProperties()));
		}
		catch(FileNotFoundException e)
		{
			e.printStackTrace();
		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
		
		String value = (String)p.get("-deleteFiles");
		if(!Boolean.parseBoolean(value.toLowerCase())) //deleteFiles == false: not delete
			return;
		
		value = (String)p.get("-deletePosSer");
		value = value.replace("/", Estaticos.FILE_SEP);
		value = value.replace("\\", Estaticos.FILE_SEP);
		Estaticos.deleteFiles(value);
		value = (String)p.get("-deletePosText");
		value = value.replace("/", Estaticos.FILE_SEP);
		value = value.replace("\\", Estaticos.FILE_SEP);
		Estaticos.deleteFiles(value);
		value = (String)p.get("-deletePosInternOut");
		value = value.replace("/", Estaticos.FILE_SEP);
		value = value.replace("\\", Estaticos.FILE_SEP);
		Estaticos.deleteFiles(value);
		value = (String)p.get("-deletePosInternIn");
		value = value.replace("/", Estaticos.FILE_SEP);
		value = value.replace("\\", Estaticos.FILE_SEP);
		Estaticos.deleteFiles(value);
		value = (String)p.get("-deletePosInternX");
		value = value.replace("/", Estaticos.FILE_SEP);
		value = value.replace("\\", Estaticos.FILE_SEP);
		Estaticos.deleteFiles(value);
		value = (String)p.get("-deletePosOutput");
		value = value.replace("/", Estaticos.FILE_SEP);
		value = value.replace("\\", Estaticos.FILE_SEP);
		Estaticos.deleteFiles(value);
		value = (String)p.get("-deleteOutSer");
		value = value.replace("/", Estaticos.FILE_SEP);
		value = value.replace("\\", Estaticos.FILE_SEP);
		Estaticos.deleteFiles(value);
		value = (String)p.get("-deleteOutText");
		value = value.replace("/", Estaticos.FILE_SEP);
		value = value.replace("\\", Estaticos.FILE_SEP);
		Estaticos.deleteFiles(value);
		value = (String)p.get("-deleteInternOut");
		value = value.replace("/", Estaticos.FILE_SEP);
		value = value.replace("\\", Estaticos.FILE_SEP);
		Estaticos.deleteFiles(value);
		value = (String)p.get("-deleteInternIn");
		value = value.replace("/", Estaticos.FILE_SEP);
		value = value.replace("\\", Estaticos.FILE_SEP);
		Estaticos.deleteFiles(value);
		value = (String)p.get("-deleteInternX");
		value = value.replace("/", Estaticos.FILE_SEP);
		value = value.replace("\\", Estaticos.FILE_SEP);
		Estaticos.deleteFiles(value);
	}


	//Devuelve el JRadioButton que se selecciona
	public static JRadioButton getSelection(ButtonGroup group)
	{
		for (Enumeration e=group.getElements(); e.hasMoreElements(); )
		{
			JRadioButton b = (JRadioButton)e.nextElement();
			if (b.getModel() == group.getSelection())
			{
				return b;
			}
		}
		return null;
	}

	//Determina si el btn se ha seleccionado
	public static boolean isSelected(JRadioButton btn)
	{
		DefaultButtonModel model = (DefaultButtonModel)btn.getModel();
		return model.getGroup().isSelected(model);
	}



	public void borrar()
	{
		File ruta = new File(this.datos.getDirectorioEntrada());
		File listaArchivos[] = ruta.listFiles();
		if(listaArchivos == null)
		{
			//The input directory does not exist
			System.err.println("input directory: #" + this.datos.getDirectorioEntrada() + "# non-existent");
			System.exit(0);
		}
		for(int i = 0; i < listaArchivos.length; i++)
			listaArchivos[i].delete();
	}

	public void crear()
	{
		Fichero fichero = new Fichero(this.datos.getDirectorioEntrada(), this.datos.getFicheroTagger());
		fichero.escribir(frases.getText());
		fichero.cerrar();
	}










	public void preprocesar(String tempDirEntrada)
	{
		JOptionPane.showMessageDialog(null, 
				"Input: " + 
				"\n  From: " + getSelection(grupoBotones).getText() +
				"\n  Language: " + this.datos.getIdioma() +
				"\n  POS tagger: " + this.datos.getPosTagger() +
				"\n  Frequency Threshold: " + this.datos.getUmbralFrecuencia() +
				"\n  C-Value Threshold: " + this.datos.getUmbralCvalue(), 
				"Selected Values", 
				JOptionPane.INFORMATION_MESSAGE);


		String stringSalida = "\n\n\n\t===== CUTEXT =====\n\n\n" + 
			"------- Input -------" + 
			"\n  From: " + getSelection(grupoBotones).getText() +
			"\n  Language: " + this.datos.getIdioma() +
			"\n  POS tagger: " + this.datos.getPosTagger() +
			"\n  Frequency Threshold: " + this.datos.getUmbralFrecuencia() +
			"\n  C-Value Threshold: " + this.datos.getUmbralCvalue() + 
			"\n-------------------" + 
			"\n\n\n------- Time -------" + 
			"\nPOS Tagging Time: ";

		long initialTpos = System.nanoTime();

		Preprocesar p = new Preprocesar(seleccionLista, this.datos);
		System.out.println("preprocessing...");
		//textArea.append("preprocessing...");
		p.preprocesar();
		Frases frases = p.execTagger();
		System.out.println("finished preprocess");
		//textArea.append("\nfinished preprocess");

		long finalTpos = System.nanoTime() - initialTpos;
		Tiempo t = new Tiempo();
		t.conversion(finalTpos);

		stringSalida += t.aString();


		//Preprocesar los ficheros de entrada
		//ConcatenarFicheros cf = new ConcatenarFicheros(seleccionLista, this.datos.getDirectorioEntrada(), this.datos.getDirectorioIntermedio(), this.datos.getFicheroTagger());
		//cf.concatenar();


		//Pasar el etiquetador léxico
		//ejecutarEtiquetadorLexico();


		//set directorioEntrada to the previous value
		this.datos.setDirectorioEntrada(tempDirEntrada);

		//ejecutar Cutext
		DialogoEjecucion marco = new DialogoEjecucion(NewJFrame.this);
		marco.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
		marco.setVisible(true);
		Principal principal = new Principal(marco, this.datos, frases);
		principal.cutext(stringSalida, initialTpos);
	}









    private void botonRadioTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRadioTextoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botonRadioTextoActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame(new DatosEntrada()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup grupoBotones;
    private javax.swing.JButton botonSelect;
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonOk;
    private javax.swing.JComboBox<String> comboCvalue;
    private javax.swing.JComboBox<String> comboFrec;
    private javax.swing.JComboBox<String> comboLanguage;
    private javax.swing.JComboBox<String> comboTagger;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel labelCvalue;
    private javax.swing.JLabel labelFrec;
    private javax.swing.JLabel labelLanguage;
    private javax.swing.JLabel labelTagger;
    private javax.swing.JPanel panelDocuments;
    private javax.swing.JPanel panelInput;
    private javax.swing.JPanel panelOutput;
    private javax.swing.JRadioButton radioFile;
    private javax.swing.JRadioButton radioText;
    private javax.swing.JTextField textFieldSelect;

    private javax.swing.JTextArea frases; //es para enviarla, y después recogerla, a NewJDialog
    private javax.swing.JTextField campoTextoDirectorioEntrada; //es para enviarla, y después recogerla, a ArbolDirectorios
    private ArrayList seleccionLista; //es para enviarla, y después recogerla, a ArbolDirectorios

	DatosEntrada datos = new DatosEntrada();
    // End of variables declaration//GEN-END:variables
}























